Generate Dummy Data:
https://randomuser.me/documentation
https://randomapi.com/
My API key: O9SF-L9BX-ZST4-VGBG

AI IMAGES:
https://www.bing.com/images/search?view=detailV2&ccid=umVFeuYa&id=8205C22520429DADDB1BFAC4856AEF359CD679CF&thid=OIP.umVFeuYa-emf28UMBkK37wHaHa&mediaurl=https%3A%2F%2Fimgv3.fotor.com%2Fimages%2Fgallery%2FAI-3D-Female-Profile-Picture.jpg&cdnurl=https%3A%2F%2Fth.bing.com%2Fth%2Fid%2FR.ba65457ae61af9e99fdbc50c0642b7ef%3Frik%3Dz3nWnDXvaoXE%252bg%26pid%3DImgRaw%26r%3D0&exph=600&expw=600&q=ai+generated+profile+pic&simid=608034324964931847&form=IRPRST&ck=FDBF728B20BBA197820EB1F8A5B866DC&selectedindex=2&itb=0&cw=1145&ch=542&ajaxhist=0&ajaxserp=0&vt=0&sim=11


C:\Users\Martin\Documents\Coding\udemy_React>npm view react version
19.0.0
https://www.markdownguide.org/cheat-sheet/
Claude.ai Feedback:
There are 2 issues in your code:
The angle brackets around ReactDom.render are incorrect. Remove them:

ReactDOM is capitalized incorrectly. It should be ReactDOM not ReactDom.

LATEST VID:
SECTION 2: Components in React
10. Stateless Functional Components
VID_TIME: 0:09 / 7:05

-----------------------------------------------------------------------------------
NPM Usage:

npm install        install all the dependencies in your project
npm install <foo>  add the <foo> dependency to your project
npm test           run this project's tests
npm run <foo>      run the script named <foo>
npm <command> -h   quick help on <command>
npm -l             display usage info for all commands
npm help <term>    search for help on <term> (in a browser)
npm help npm       more involved overview (in a browser)

All commands:

    access, adduser, audit, bugs, cache, ci, completion,
    config, dedupe, deprecate, diff, dist-tag, docs, doctor,
    edit, exec, explain, explore, find-dupes, fund, get, help,
    help-search, hook, init, install, install-ci-test,
    install-test, link, ll, login, logout, ls, org, outdated,
    owner, pack, ping, pkg, prefix, profile, prune, publish,
    query, rebuild, repo, restart, root, run-script, sbom,
    search, set, shrinkwrap, star, stars, start, stop, team,
    test, token, uninstall, unpublish, unstar, update, version,
    view, whoami

Specify configs in the ini-formatted file:
    C:\cygwin64\home\Martin\.npmrc
or on the command line via: npm <command> --key=value

More configuration info: npm help config
Configuration fields: npm help 7 config

npm@10.9.0 C:\Users\Martin\AppData\Roaming\npm\node_modules\npm
-----------------------------------------------------------------------------------

SHELL OUTPUT:
Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git add .

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html
        new file:   index2.html
        new file:   index3.html
        new file:   notes.txt


Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git commit -m "first commit"
[master (root-commit) d285bac] first commit
 4 files changed, 239 insertions(+)
 create mode 100644 index.html
 create mode 100644 index2.html
 create mode 100644 index3.html
 create mode 100644 notes.txt

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git branch -M main

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git status
On branch main
nothing to commit, working tree clean

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git remote add origin https://github.com/martdev1963/React.git

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git status
On branch main
nothing to commit, working tree clean

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git push -u origin main
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 4 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 2.74 KiB | 936.00 KiB/s, done.
Total 6 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/martdev1963/React.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git status
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git commit -m "include README.md and add notes"
[main 372f456] include README.md and add notes
 2 files changed, 67 insertions(+)
 create mode 100644 README.md

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ ^C

Martin@DESKTOP-HTLQ9GM /cygdrive/c/users/Martin/Documents/Coding/udemy_React
$ git push origin main
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 4 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 1.79 KiB | 914.00 KiB/s, done.
Total 4 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/martdev1963/React.git
   d285bac..372f456  main -> main

https://babeljs.io/

 /**-----------------------------------------------------------------------------------
         *                              **DOCUMENTATION**
         * COMPLEX COMPONENTS CONTAINING OTHER COMPONENTS (child components) 
         * Use Stateless Functional Components when you do not need additional features of
         * class Components.
         * LSNs:19, 20, 21, 22
         * Friendly Complex Component Contains all the components...
         * Avatar Component - jsx with img
         * UserName Component - jsx with h1 tag
         * GetConnected Complex Component (contains its own child components;) containing:
         * .Like Component 
         * .Share Component
         * .Add Component
         * Awesome font bug fix resolution w/:
         * https://chatgpt.com/share/67721074-f20c-8009-8db1-e3952d1cc22f
         * NEXT LSN: 23. Object Literal Notation.
         * Change color settings in vs code in settings.json file...
         * https://www.youtube.com/watch?v=88BsSjG5iQQ&t=95s
         * -----------------------------------------------------------------------------------
        */

        /**-----------------------------------------------------------------------------------
         *                            COMPONENTS CODE BLOCK START
         * These are Stateless Functional Components...
         * This is the type of component you should always try to work with whenever possible.
         * 
         * -----------------------------------------------------------------------------------
        */

Change color settings in vs code in settings.json file...
https://www.youtube.com/watch?v=88BsSjG5iQQ&t=95s

This is the current color setting:

  "editor.tokenColorCustomizations": {
    "comments": "#828bea"

}
    ------------------------------**Lsn 23, 24, 25 Object Literal  Notation** START------------------------------

    dot notation:  object.property =  value;
    bracket notation: object['property'] = value;
    Anything that isn't a primitive datatype is an object in JavaScript.

    Invalid variables and a JS reserved keywords such as (function) must be surrounded with quotes... 
    you can't do this with dot notation...this is why 
    bracket notation still exists because it allows for this...
    ie: car['origin year'] = 1984

    This won't work in dot notation:
    car.origin year = 1984;
    You can however, add this property containing a space to the Object literal:

    var car = {
      
      'origin year': 1984
    

    }
------------------------------**Lsn 23, 24, 25 Object Literal  Notation** END------------------------------
lsn 27: 
Props 1 - Stateless Fuctional Components:
Props are short for properties.
Props are a way of passing data from parent to child.
They are a top down communication from parent top components to children bottom components.
Props flow downard [unidirectional]
React is said to have unidirectional data flow.
Props are used when you need immutable data [read only].


-----------------------------------------------------------------------------------------------------------

				**AI TOOLS**


https://lovable.dev
https://v0.dev/
https://bolt.new/
https://preview--melody-maven-profile.lovable.app/


CURRENT_VID_TIME: 38: Functional Programming - Filter.

*FUNCTIONAL PROGRAMMING*

JavaScript can handle higher-order functions.
A higher-order function is a function that can take another function as an argument, or that returns a function as a result.

The essense of FP is really very simple, programs are built mostly with a handful of very small, very reusable, very predictable pure functions.
A pure function always returns the same result, given the same parameters.

A pure function is a function in which:
-Given the same input, will always return the same output.
-Produce no side effects.
-Relies on no external state.

A funtion is a chunk of code that we can apply over and over again...

Array Methods:
map()  - a functon or method on an array...

Example below: cook is also a function that further processes the array being passed to the map function thus making popcorn, etc...
map([corn, cow, chicken], cook)
=> [popcorn, hamburger, eggs]

filter([popcorn, hamburger, eggs], isVegetarian) ---thisVegetarian is a true/false filter...the function isVegetarian will return an array of veggie items only in this case...
=> [popcorn, eggs] it returns an array in which every element has been evaluated true or false, and the true values are returned to a new array.

The reduce method below has alot of customizable flexibility.
reduce()

filter() is a method, a function on arrays.

Notice the function argument, in the code below, is known as the callback function which will return a new array...The original array is left untouched.
array.filter(function(currentValue), {
  return true;
})

What makes something, "Functinal Programming" is; passing a function to a function as an argument.


CURRENT_VID_TIME: 39: Filter Lab

Pure Functions have many beneficial properties;
and form the foundation of functional programming. Pure functions are completely independent of ouside state,
and as such they're inmmune to entire classes of bugs that have to do with shared mutable state.
Their indepepndnet nature, also makes them great candidates for parrallel processing, accross many CPUs, 
and across entire distributed computing clusters, which makes them essential for many types of scientific and 
resource intensive, computing tasks. Pure Functions are also extremely independent and easy to move around,
refactor and reorganize in your code, making your programs more flexible and adaptable to future changes.

A function is pure if, given the same input, it will always produce the same output.
An example of an impure function: Math.random() returns a different output given the same input.
We can't expect the same output even though we didn't pass any arguments.


Remember, in JavaScript, functions are just like values, like any other value in JavaScript.
Thus, We pass functions as arguments to functions.
The map method will be attached to an array just like filter was in our last lesson.
It creates a new array with the results of calling a provided function on every element of an array.
Passing a function to a function makes filter(), map() and reduce() higher order functions.

Every element on our original array will interact with this callback function and result in a new array.
Map() is different from filter() in that filter() deletes values that don't evaluate to true where map() transforms values.
Map passes all the elements and a transformed state.

CURRENT LSN: 41
CURRENT_VID_TIME: 0:00/7:09  40: Map Lab
Higher order functions can recieve another function as an argument.
The new array returned by map() function, will have the same length as the input array, but its contents will have bween mapped
to a new form by the function.
Method Chaining in JavaScript or chaining methods, also known as cascading refers to repeatedly
calling one method after another on an object in one continuous line of code.
This technique abounds in jQuery.

NEXT LSN: 42: Iterating through Lists (Map Method in React)
vid_time: 10:10 - DONE

react.js:3287  Warning: Each child in an array or iterator should have a unique "key" prop. Check the render method of `FamilyList`. See https://fb.me/react-warning-keys for more information.
    in div (created by FamilyList)
    in FamilyList
CURRENT LSN: 43 - Iterating Through Lists part 2 Refactoring...
vid_time: 1:59 - DONE

NEXT LSN: 44: Filter and Map method on an array
vid_time: 04:20 - DONE

NEXT LSN: 45: Rendering two filtered and transformed lists to the DOM.
vid_time: 07:15 - DONE
Currently on: 46. Codepen Challenger 1 and 2 - DONE
vid_time: 04:32

*lsn:48 PROPS COLOR SPECTRUM REFACTOR*  - DONE
Challenge 1 - create prop of colors and assign it the 
value of our colors array
Challenge 2 -set up Color component to receive the array and 
transform it with the map method
vid_time: 06:55

NEXT LSN: 50: Friendly - Filter and map two lists to the DOM.  - DONE
Male / Female lists

Next LSN: 51 SECTION 10 BONUS: Further React Learning  - DONE

NEXT LSN: SECTION 11: Lsn 52: Useless note taker - Intro to React Events
Handling events with React elements is very similar to handling events on DOM elements.
There are some syntactic differences:
React events are named using camelCase, rather than lowercase.
With JSX you pass a function as the event handler, rather than a string.

An Event Handler is a function that should run whenever an event occurs.
Function names best practice:
Namaing fuctions for event handlers: This isn't a syntax rule that will break your code...
The three guidelines to follow:
Naming Convention:
1. Begin with "on" or "handle"
2. Name the DOM element.
3. Describe the expected action.
ie: handleButtonEdit
pay attention to the syntax with classes, that you aren't going to use a comma between these event handlers
or between these event handlers and the render method.

NEXT LSN: SECTION 11: Lsn 53: Events Part 2

Event Handlers:
1. Attached to DOM elements
2. Assign function to event handler
https://react.dev/reference/react-dom/components/common#mouseevent-handler

NEXT LSN: SECTION 11: Lsn 54: This & Bind Lecture
In most cases, the value of 'this' is determined by how a function is called. It can't be set by assignment during execution, and it may be
differernt each time the function is called. ES5 introduced the bind method to set the value of a function's 'this' regardless of how it's called.
Bind creates a new function that will have 'this' set to the first parameter passed to bind().

VID_TIME: 1:25 / 4:58

// object literal
let cat { };

cat = {
  sound: 'meow',
  speak: function() { // anonymous function...
      console.log(this.sound); // this. refers to the object (instance)
  }
};

// envoke (call) the speak() method
cat.speak(); // 'meow'

// We are naming the object and a property on that object to have access to the speak function.
let speakFunction = cat.speak;
let speakFunction = undefined
What happens here is that the value assigned to the speakFunction variable of cat.speak, is no longer a method.
A method is a function attached to an object.
But in the process of assigning the object, cat and its property, speak, to a variable,
we aren't assigning a method to our speak function variable, but a function detached from the object.
So our this keyword doesn't have access to te cat object.
THe original context is not there.

You can check to see what the js interpreter sees...

let speakFunction = function() {
  console.log(this.sound);
}
We get a value of undefined when we look for the value of the sound property.
We don't see an object to connect it with....
the this keyword in this case is contextless
This is where the bind method comes into play.

Bind creates a new function that will have 'this' set to the first parameter passed to bind.
VID_TIME: 3:56 / 4:58

speakFunction = cat.speak;

let speakFunctionBind = speakFunction.bind(cat);  // passing cat object.
The result is that the this keyword will look to the cat object for context and return the value meow. 
4:12 / 4:58

NEX LSN: 55. This & Bind Lab
0:02 / 5:59
// review this & bind
// 'this' is defined by creation context.
// in objects 'this' is set to the object method is called on.
// bind helps 'this' find context.
// pass object as argument to bind method to find desired context.

// practice

let person1 = {
  name: 'Alex'
};

let person2 = {
  name: 'Alexis'
};

function namer() {
  return this.name;
}

namer();

// Using console.log

// Challenge
// Use bind method twice to give 'this' the context of person1 and person2


// possible solution

namer.bind(person1)();


Edge Console OUTPUT:
nameFunction = person1.name;
'Alex'
nameFunction.bind()
VM730:1 Uncaught TypeError: nameFunction.bind is not a function
    at <anonymous>:1:14
(anonymous) @ VM730:1
nameFunction = namer().bind(person1); 
VM777:1 Uncaught TypeError: namer(...).bind is not a function
    at <anonymous>:1:24
(anonymous) @ VM777:1
namer.bind(person1);
ƒ namer() {return this.name;}
namer.bind(person1)();
'Alex'
namer.bind(peron2)();
VM849:1 Uncaught ReferenceError: peron2 is not defined
    at <anonymous>:1:12
(anonymous) @ VM849:1
let person2 = { name: 'Alexis' };
undefined
namer.bind(person2)();
'Alexis'

4:05 / 5:59

// practice

// object named number
let number = {
  x: 24,
  y:22
};

// function expression in which the variable count is assigned a function that, when invoked, will log to the console,
the arguments of this.x and this.y
let count = function() {
    console.log(this.x + this.y)
}

count();
NaN

CONSOLE OUTPUT:
let number = { x: 24, y:22 };
undefined
let count = function() {
    console.log(this.x + this.y)
}
undefined
count();
VM260:2 NaN
undefined


CONSOLE OUTPUT WHEN CALLING THE COUNT function...
count.bind(number)();
VM260:2 46

// Alternative solution:
// declare a new variable: boundFunc and assign it the value of our count function expression with he bind method,
giving 'this' the context of the number object.
let boundFunc = count.bind(number);

boundFunc();
46

CONSOLE OUTPUT:
let boundFunc = count.bind(number);
undefined
boundFunc();
VM260:2 46

NEXT LSN SECTION 13: State
lsn 56: Guess my age; intro to React State
14min.

FROM SECTION 8 / index.html

constructor(props) {
  super(props);
}
Whenever an object is created via a class in JavaScript, JavaScript invokes the constructor function.
React will invoke the constructor with the props and context of the component.
The super keyword; this invokes the constructor function defined by REact.component, which executes some necessary setup.
Its important to call super whenever we define a constructor function.
If you would like to set a property or access 'this' inside the constructor, you need to call super().
If a component doesn't use props or context, it's okay to not pass those along.

            constructor(props) {
                super(props);
                this.state = {
                    age: 'Guess My Age'
                };
                this.onButtonClick = this.onButtonClick.bind(this);
            }

When making React components, we come across this problem pretty much everytime we make a component with some kind of
user interaction. This is a little tricky with ES6 classes.
Inside the render method, the this keyword is bound to the component.
No extra work is needed. The this keyword has the context of the component guess age giving you access to its methods.
However, things are different inside of the constructor method. With ES6 classes, properties of the class do not 
automatically bind to the React class instance. Anytime we define our own custom component methods for an ES6 class component, 
we have to manually bind this to the component ourselves.
The functions bind method allows you to specify what the this variable inside a function body should be set to.
What we're doing here is a common JavaScript pattern.
We're redefining the component method on button click setting it to the same function, but bound to this, the component.
Now whenever on button click executes, 'this' will reference the component as opposed to null.
In this senerio we just bind methods by hand in the constructor.

    /**
     * ---------------------------------------------------------------------------------------------
     *                                  CODE REFACTOR VERSION 3
     * Using the fat arrow function in ES6;
     * in ES6 fat arrow functions preserve the 'this' context just when they are called
     * And since we are in the render method, the this keyword is in reference to our component.
     * VID_TIME: 12:30 / 13:36
     * 
     *----------------------------------------------------------------------------------------------
    */

Next LSN: 57. Meal Voter


































'




















 

















